generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          String      @id @default(cuid())
  email       String      @unique
  password    String
  name        String
  role        AdminRole   @default(ADMIN)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  workshops   Workshop[]
  courses     Course[]
  internships Internship[]

  @@map("admins")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
}

// New enum for delivery mode
enum DeliveryMode {
  ONLINE
  OFFLINE
  HYBRID
}

model Workshop {
  id           String               @id @default(cuid())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime
  startTime    String
  endTime      String
  price        Float
  totalAmount  Float?               // NEW: For calculated total including taxes/fees
  maxSeats     Int                  @default(50)
  isActive     Boolean              @default(true)
  isArchived   Boolean              @default(false)
  deliveryMode DeliveryMode         @default(OFFLINE) // NEW: Online/Offline mode
  venue        String?              // NEW: Physical venue for offline mode
  meetingLink  String?              // NEW: Meeting link for online mode
  posterImage  String?              // NEW: Poster image URL/path
  teacher      String?              // NEW: Primary teacher/instructor name
  teacherBio   String?              // NEW: Teacher biography
  incharge     String?              // NEW: Program coordinator/incharge
  formFields   Json?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  createdBy    String?
  admin        Admin?               @relation(fields: [createdBy], references: [id])
  registrations WorkshopRegistration[]
  payments     Payment[]

  @@map("workshops")
}

model Course {
  id           String               @id @default(cuid())
  title        String
  description  String?
  startDate    DateTime
  endDate      DateTime
  duration     String
  price        Float                @default(0)
  totalAmount  Float?               // NEW: For calculated total including taxes/fees
  maxSeats     Int                  @default(100)
  isActive     Boolean              @default(true)
  isArchived   Boolean              @default(false)
  deliveryMode DeliveryMode         @default(OFFLINE) // NEW: Online/Offline mode
  venue        String?              // NEW: Physical venue for offline mode
  meetingLink  String?              // NEW: Meeting link for online mode
  posterImage  String?              // NEW: Poster image URL/path
  teacher      String?              // NEW: Primary teacher/instructor name
  teacherBio   String?              // NEW: Teacher biography
  incharge     String?              // NEW: Program coordinator/incharge
  formFields   Json?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  createdBy    String
  admin        Admin                @relation(fields: [createdBy], references: [id])
  registrations CourseRegistration[]
  payments     Payment[]

  @@map("courses")
}

model Internship {
  id          String                @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime
  duration    String
  stipend     Float                 @default(0)
  totalAmount Float?               // NEW: For calculated total including taxes/fees (if applicable)
  maxSeats    Int                   @default(20)
  isActive    Boolean               @default(true)
  isArchived  Boolean               @default(false)
  deliveryMode DeliveryMode         @default(OFFLINE) // NEW: Online/Offline mode
  venue       String?              // NEW: Physical venue for offline mode
  meetingLink String?              // NEW: Meeting link for online mode
  posterImage String?              // NEW: Poster image URL/path
  supervisor  String?              // NEW: Internship supervisor (instead of teacher)
  supervisorBio String?            // NEW: Supervisor biography
  incharge    String?              // NEW: Program coordinator/incharge
  formFields  Json?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  createdBy   String
  admin       Admin                 @relation(fields: [createdBy], references: [id])
  registrations InternshipRegistration[]

  @@map("internships")
}

model WorkshopRegistration {
  id           String               @id @default(cuid())
  name         String
  email        String
  phone        String
  college      String?
  year         String?
  branch       String?
  experience   String?
  formData     Json?
  status       RegistrationStatus   @default(PENDING)
  workshopId   String
  workshop     Workshop             @relation(fields: [workshopId], references: [id])
  paymentId    String?              @unique
  payment      Payment?             @relation(fields: [paymentId], references: [id])
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  paymentScreenshot String?

  @@index([email])
  @@index([phone])
  @@map("workshop_registrations")
}

model CourseRegistration {
  id          String      @id @default(cuid())
  courseId    String
  name        String
  email       String
  phone       String?
  status      String      @default("pending")
  formData    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  paymentId   String?     @unique
  
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  payment     Payment?    @relation(fields: [paymentId], references: [id])
  
  @@unique([courseId, email])
  @@map("course_registrations")
}

model InternshipRegistration {
  id            String             @id @default(cuid())
  name          String
  email         String
  phone         String
  college       String
  year          String
  branch        String
  cgpa          Float?
  resume        String?
  coverLetter   String?
  formData      Json?
  status        RegistrationStatus @default(PENDING)
  internshipId  String
  internship    Internship         @relation(fields: [internshipId], references: [id])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@index([email])
  @@index([phone])
  @@map("internship_registrations")
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Payment {
  id                  String          @id @default(cuid())
  amount              Float
  currency            String          @default("INR")
  paymentMethod       PaymentMethod
  upiId               String?
  transactionId       String?         @unique
  status              PaymentStatus   @default(PENDING)
  statusReason        String?
  paymentProof        String?
  verifiedAt          DateTime?
  workshopId          String?
  workshop            Workshop?       @relation(fields: [workshopId], references: [id])
  courseId            String?
  course              Course?         @relation(fields: [courseId], references: [id])
  workshopRegistrationId String?      @unique
  courseRegistrationId   String?      @unique
  workshopRegistration WorkshopRegistration?
  courseRegistration CourseRegistration?
  paymentData         Json?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@map("payments")
}

enum PaymentMethod {
  UPI
  CARD
  NET_BANKING
  WALLET
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

model EmailLog {
  id                String       @id @default(cuid())
  to                String
  subject           String
  template          String
  status            EmailStatus  @default(PENDING)
  error             String?
  registrationId    String?
  registrationType  String?      @default("workshop")
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@map("email_logs")
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

model FormSession {
  id           String     @id @default(cuid())
  sessionId    String     @unique
  formType     String
  programId    String
  formData     Json
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  expiresAt    DateTime

  @@map("form_sessions")
}